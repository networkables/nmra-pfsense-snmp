[global_tags]
  site_name = "${PG_SITE_NAME}"

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  hostname = ""
  omit_hostname = false
  snmp_translator = "gosmi"

[[outputs.influxdb_v2]]
  urls = ["${PG_INPUT_URL:-https://i.monitoring.networkables.com}"]
  organization = "${PG_ORG_NAME}"
  token = "${PG_ORG_TOKEN}"
  bucket = "input/pfsense/telegrafsnmp"
  content_encoding = "identity"

[[inputs.snmp]]
  #
  # System Information
  #
  agents = [ "${PG_PFSENSE_ADDR}" ]
  version = 2
  community = "${PG_SNMP_COMMUNITY}"
  interval = "60s"
  timeout = "10s"
  path = ["/etc/telegraf/mibs"]
  name = "pfsense_device"
  tags = {device_type = "pfsense"}
  [[inputs.snmp.field]]
    name = "system_name"
    oid = "SNMPv2-MIB::sysName.0"
    is_tag = true
  [[inputs.snmp.field]]
    name = "system_desc"
    oid = "SNMPv2-MIB::sysDescr.0"
    is_tag = true
  [[inputs.snmp.field]]
    name = "location"
    oid = "SNMPv2-MIB::sysLocation.0"
    is_tag = true
  [[inputs.snmp.field]]
    name = "mac"
    oid = "IF-MIB::ifPhysAddress.1"
    is_tag = true
  [[inputs.snmp.field]]
    name = "uptime"
    oid = "SNMPv2-MIB::sysUpTime.0"
  [[inputs.snmp.field]]
    name = "mem_total_real"
    oid = "UCD-SNMP-MIB::memTotalReal.0"
  [[inputs.snmp.field]]
    name = "mem_avail_real"
    oid = "UCD-SNMP-MIB::memAvailReal.0"
  [[inputs.snmp.field]]
    name = "cpuraw_user"
    oid = "UCD-SNMP-MIB::ssCpuRawUser.0"
  [[inputs.snmp.field]]
    name = "cpuraw_nice"
    oid = "UCD-SNMP-MIB::ssCpuRawNice.0"
  [[inputs.snmp.field]]
    name = "cpuraw_system"
    oid = "UCD-SNMP-MIB::ssCpuRawSystem.0"
  [[inputs.snmp.field]]
    name = "cpuraw_idle"
    oid = "UCD-SNMP-MIB::ssCpuRawIdle.0"
  [[inputs.snmp.field]]
    name = "cpuraw_wait"
    oid = "UCD-SNMP-MIB::ssCpuRawWait.0"
  [[inputs.snmp.field]]
    name = "cpuraw_kernel"
    oid = "UCD-SNMP-MIB::ssCpuRawKernel.0"
  [[inputs.snmp.field]]
    name = "cpuraw_interrupt"
    oid = "UCD-SNMP-MIB::ssCpuRawInterrupt.0"
#  [[inputs.snmp.field]]
#    name = "cpuraw_softirq"
#    oid = "UCD-SNMP-MIB::ssCpuRawSoftIRQ.0"
#  [[inputs.snmp.field]]
#    name = "cpuraw_steal"
#    oid = "UCD-SNMP-MIB::ssCpuRawSteal.0"

  #
  # System Interfaces
  #
  [[inputs.snmp.table]]
    name = "pfsense_interface"
    inherit_tags = [ "host", "system_name" ]
    oid = "IF-MIB::ifXTable"
    [[inputs.snmp.table.field]]
      name = "index"
      oid = "IF-MIB::ifIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_name"
      oid = "IF-MIB::ifDescr"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_alias"
      oid = "IF-MIB::ifAlias"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_type"
      oid = "IF-MIB::ifType"
      is_tag = true
      conversion = "enum"
    [[inputs.snmp.table.field]]
      name = "if_connected"
      oid = "IF-MIB::ifConnectorPresent"
      is_tag = true
      conversion = "enum"
    [[inputs.snmp.table.field]]
      name = "if_mac"
      oid = "IF-MIB::ifPhysAddress"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_admin_status"
      oid = "IF-MIB::ifAdminStatus"
      is_tag = true
      conversion = "enum"
    [[inputs.snmp.table.field]]
      name = "if_oper_status"
      oid = "IF-MIB::ifOperStatus"
      is_tag = true
      conversion = "enum"

[[inputs.snmp]]
  #
  # System Information
  # pfSense Firewall
  #
  agents = [ "${PG_PFSENSE_ADDR}" ]
  version = 2
  community = "${PG_SNMP_COMMUNITY}"
  interval = "60s"
  timeout = "10s"
  path = ["/etc/telegraf/mibs"]
  name = "pfsense_firewall"
  tags = {device_type = "pfsense"}
  [[inputs.snmp.field]]
    name = "system_name"
    oid = "SNMPv2-MIB::sysName.0"
    is_tag = true
  [[inputs.snmp.field]]
    name = "statetable_limit"
    oid = "BEGEMOT-PF-MIB::pfLimitsStates.0"
  [[inputs.snmp.field]]
    name = "statetable_used"
    oid = "BEGEMOT-PF-MIB::pfStateTableCount.0"
  [[inputs.snmp.field]]
    name = "statetable_adds"
    oid = "BEGEMOT-PF-MIB::pfStateTableInserts.0"
  [[inputs.snmp.field]]
    name = "statetable_removes"
    oid = "BEGEMOT-PF-MIB::pfStateTableRemovals.0"
  [[inputs.snmp.field]]
    name = "statetable_searches"
    oid = "BEGEMOT-PF-MIB::pfStateTableSearches.0"
  [[inputs.snmp.field]]
    name = "pf_match"
    oid = "BEGEMOT-PF-MIB::pfCounterMatch.0"
  [[inputs.snmp.field]]
    name = "pf_badoffset"
    oid = "BEGEMOT-PF-MIB::pfCounterBadOffset.0"
  [[inputs.snmp.field]]
    name = "pf_fragments"
    oid = "BEGEMOT-PF-MIB::pfCounterFragment.0"
  [[inputs.snmp.field]]
    name = "pf_short"
    oid = "BEGEMOT-PF-MIB::pfCounterShort.0"
  [[inputs.snmp.field]]
    name = "pf_normalize"
    oid = "BEGEMOT-PF-MIB::pfCounterNormalize.0"
  [[inputs.snmp.field]]
    name = "pf_memdrop"
    oid = "BEGEMOT-PF-MIB::pfCounterMemDrop.0"
  [[inputs.snmp.field]]
    name = "srcnode_limit"
    oid = "BEGEMOT-PF-MIB::pfLimitsSrcNodes.0"
  [[inputs.snmp.field]]
    name = "srcnode_count"
    oid = "BEGEMOT-PF-MIB::pfSrcNodesCount.0"
  [[inputs.snmp.field]]
    name = "srcnode_adds"
    oid = "BEGEMOT-PF-MIB::pfSrcNodesInserts.0"
  [[inputs.snmp.field]]
    name = "srcnode_removes"
    oid = "BEGEMOT-PF-MIB::pfSrcNodesRemovals.0"
  [[inputs.snmp.field]]
    name = "srcnode_searches"
    oid = "BEGEMOT-PF-MIB::pfSrcNodesSearches.0"

  #
  # PF Interfaces
  #
  [[inputs.snmp.table]]
    name = "pfsense_pfinterface"
    inherit_tags = [ "host","system_name" ]
    oid = "BEGEMOT-PF-MIB::pfInterfacesIfTable"
    [[inputs.snmp.table.field]]
      name = "index"
      oid = "BEGEMOT-PF-MIB::pfInterfacesIfIndex"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_name"
      oid = "BEGEMOT-PF-MIB::pfInterfacesIfDescr"
      is_tag = true
    [[inputs.snmp.table.field]]
      name = "if_type"
      oid = "BEGEMOT-PF-MIB::pfInterfacesIfType"
      is_tag = true
      conversion = "enum"


[[processors.starlark]]
  namepass = ["pfsense_device"]

  source = '''
def apply(metric):
  if "mem_total_real" and "mem_avail_real" in metric.fields:
    total = metric.fields["mem_total_real"]
    avail = metric.fields["mem_avail_real"]
    metric.fields["mem_used_pct"] = ((total-avail) / total) * 100.0

  if "uptime" in metric.fields:
    metric.fields["uptime"] = metric.fields["uptime"] / 100.0

  return metric
'''
